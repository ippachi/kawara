# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `committee` gem.
# Please instead update this file by running `bin/tapioca gem committee`.

# Stub is not yet supported in OpenAPI 3
module Committee
  class << self
    # @return [Boolean]
    def debug?; end

    def log_debug(message); end
    def warn_deprecated(message); end
  end
end

class Committee::BadRequest < ::Committee::Error; end
module Committee::Bin; end

# CommitteeStub internalizes the functionality of bin/committee-stub so
# that we can test code that would otherwise be difficult to get at in an
# executable.
class Committee::Bin::CommitteeStub
  # Gets a Rack app suitable for use as a stub.
  #
  # @raise [Committee::OpenAPI3Unsupported]
  def get_app(schema, options); end

  # Gets an option parser for command line arguments.
  def get_options_parser; end
end

module Committee::Drivers
  class << self
    # Gets a driver instance from the specified name. Raises ArgumentError for
    # an unknown driver name.
    def driver_from_name(name); end

    # load and build drive from Hash object
    #
    # @param hash [Hash]
    # @return [Committee::Driver]
    def load_from_data(hash, schema_path = T.unsafe(nil)); end

    # load and build drive from file
    #
    # @param schema_path [String]
    # @return [Committee::Driver]
    def load_from_file(schema_path); end

    # load and build drive from JSON file
    #
    # @param schema_path [String]
    # @return [Committee::Driver]
    def load_from_json(schema_path); end

    # load and build drive from YAML file
    #
    # @param schema_path [String]
    # @return [Committee::Driver]
    def load_from_yaml(schema_path); end
  end
end

# Driver is a base class for driver implementations.
class Committee::Drivers::Driver
  # Use GET request body to request parameter (request body merge to parameter)
  def default_allow_get_body; end

  # Whether parameters that were form-encoded will be coerced by default.
  def default_coerce_form_params; end

  # Whether parameters in a request's path will be considered and coerced
  # by default.
  def default_path_params; end

  # Whether parameters in a request's query string will be considered and
  # coerced by default.
  def default_query_params; end

  def name; end

  # Parses an API schema and builds a set of route definitions for use with
  # Committee.
  #
  # The expected input format is a data hash with keys as strings (as
  # opposed to symbols) like the kind produced by JSON.parse or YAML.load.
  def parse(data); end

  def schema_class; end
end

module Committee::Drivers::HyperSchema; end

class Committee::Drivers::HyperSchema::Driver < ::Committee::Drivers::Driver
  def default_allow_get_body; end
  def default_coerce_date_times; end

  # Whether parameters that were form-encoded will be coerced by default.
  def default_coerce_form_params; end

  # Whether parameters in a request's path will be considered and coerced by
  # default.
  def default_path_params; end

  # Whether parameters in a request's query string will be considered and
  # coerced by default.
  def default_query_params; end

  def default_validate_success_only; end
  def name; end

  # Parses an API schema and builds a set of route definitions for use with
  # Committee.
  #
  # The expected input format is a data hash with keys as strings (as opposed
  # to symbols) like the kind produced by JSON.parse or YAML.load.
  def parse(schema); end

  def schema_class; end

  private

  def build_routes(hyper_schema); end
  def href_to_regex(href); end
  def parse_link(link); end
end

# Link abstracts an API link specifically for JSON hyper-schema.
#
# For most operations, it's a simple pass through to a
# JsonSchema::Schema::Link, but implements some exotic behavior in a few
# places.
class Committee::Drivers::HyperSchema::Link
  # @return [Link] a new instance of Link
  def initialize(hyper_schema_link); end

  # The link's input media type. i.e. How requests should be encoded.
  def enc_type; end

  def href; end

  # The link's output media type. i.e. How responses should be encoded.
  def media_type; end

  def method; end

  # Passes through a link's parent resource. Note that this is *not* part
  # of the Link interface and is here to support a legacy Heroku-ism
  # behavior that allowed a link tagged with rel=instances to imply that a
  # list will be returned.
  def parent; end

  def rel; end

  # The link's input schema. i.e. How we validate an endpoint's incoming
  # parameters.
  def schema; end

  def status_success; end

  # The link's output schema. i.e. How we validate an endpoint's response
  # data.
  def target_schema; end

  private

  # Returns the value of attribute hyper_schema_link.
  def hyper_schema_link; end

  # Sets the attribute hyper_schema_link
  #
  # @param value the value to set the attribute hyper_schema_link to.
  def hyper_schema_link=(_arg0); end
end

class Committee::Drivers::HyperSchema::Schema < ::Committee::Drivers::Schema
  def build_router(options); end

  # A link back to the derivative instance of Committee::Drivers::Driver
  # that create this schema.
  def driver; end

  # A link back to the derivative instance of Committee::Drivers::Driver
  # that create this schema.
  def driver=(_arg0); end

  # Returns the value of attribute routes.
  def routes; end

  # Sets the attribute routes
  #
  # @param value the value to set the attribute routes to.
  def routes=(_arg0); end

  # Returns the value of attribute validator_option.
  def validator_option; end
end

module Committee::Drivers::OpenAPI2; end

class Committee::Drivers::OpenAPI2::Driver < ::Committee::Drivers::Driver
  def default_allow_get_body; end
  def default_coerce_date_times; end

  # Whether parameters that were form-encoded will be coerced by default.
  def default_coerce_form_params; end

  # Whether parameters in a request's path will be considered and coerced by
  # default.
  def default_path_params; end

  # Whether parameters in a request's query string will be considered and
  # coerced by default.
  def default_query_params; end

  def default_validate_success_only; end
  def name; end

  # Parses an API schema and builds a set of route definitions for use with
  # Committee.
  #
  # The expected input format is a data hash with keys as strings (as opposed
  # to symbols) like the kind produced by JSON.parse or YAML.load.
  def parse(data); end

  def schema_class; end

  private

  def find_best_fit_response(link_data); end
  def href_to_regex(href); end
  def parse_definitions!(data); end
  def parse_routes!(data, schema, store); end
  def rewrite_references(schema); end
  def rewrite_references_and_parse(schemas_data, store); end
end

Committee::Drivers::OpenAPI2::Driver::DEFINITIONS_PSEUDO_URI = T.let(T.unsafe(nil), String)

# These are fields that the OpenAPI 2 spec considers mandatory to be
# included in the document's top level.
Committee::Drivers::OpenAPI2::Driver::REQUIRED_FIELDS = T.let(T.unsafe(nil), Array)

class Committee::Drivers::OpenAPI2::HeaderSchemaBuilder < ::Committee::Drivers::OpenAPI2::SchemaBuilder
  def call; end
end

# Link abstracts an API link specifically for OpenAPI 2.
class Committee::Drivers::OpenAPI2::Link
  # The link's input media type. i.e. How requests should be encoded.
  def enc_type; end

  # The link's input media type. i.e. How requests should be encoded.
  def enc_type=(_arg0); end

  # Returns the value of attribute header_schema.
  def header_schema; end

  # Sets the attribute header_schema
  #
  # @param value the value to set the attribute header_schema to.
  def header_schema=(_arg0); end

  # Returns the value of attribute href.
  def href; end

  # Sets the attribute href
  #
  # @param value the value to set the attribute href to.
  def href=(_arg0); end

  # The link's output media type. i.e. How responses should be encoded.
  def media_type; end

  # The link's output media type. i.e. How responses should be encoded.
  def media_type=(_arg0); end

  # Returns the value of attribute method.
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  def method=(_arg0); end

  def rel; end

  # The link's input schema. i.e. How we validate an endpoint's incoming
  # parameters.
  def schema; end

  # The link's input schema. i.e. How we validate an endpoint's incoming
  # parameters.
  def schema=(_arg0); end

  # Returns the value of attribute status_success.
  def status_success; end

  # Sets the attribute status_success
  #
  # @param value the value to set the attribute status_success to.
  def status_success=(_arg0); end

  # The link's output schema. i.e. How we validate an endpoint's response
  # data.
  def target_schema; end

  # The link's output schema. i.e. How we validate an endpoint's response
  # data.
  def target_schema=(_arg0); end
end

# ParameterSchemaBuilder converts OpenAPI 2 link parameters, which are not
# quite JSON schemas (but will be in OpenAPI 3) into synthetic schemas that
# we can use to do some basic request validation.
class Committee::Drivers::OpenAPI2::ParameterSchemaBuilder < ::Committee::Drivers::OpenAPI2::SchemaBuilder
  # Returns a tuple of (schema, schema_data) where only one of the two
  # values is present. This is either a full schema that's ready to go _or_
  # a hash of unparsed schema data.
  def call; end
end

class Committee::Drivers::OpenAPI2::Schema < ::Committee::Drivers::Schema
  # Returns the value of attribute base_path.
  def base_path; end

  # Sets the attribute base_path
  #
  # @param value the value to set the attribute base_path to.
  def base_path=(_arg0); end

  def build_router(options); end

  # Returns the value of attribute consumes.
  def consumes; end

  # Sets the attribute consumes
  #
  # @param value the value to set the attribute consumes to.
  def consumes=(_arg0); end

  # Returns the value of attribute definitions.
  def definitions; end

  # Sets the attribute definitions
  #
  # @param value the value to set the attribute definitions to.
  def definitions=(_arg0); end

  # A link back to the derivative instance of Committee::Drivers::Driver
  # that create this schema.
  def driver; end

  # A link back to the derivative instance of Committee::Drivers::Driver
  # that create this schema.
  def driver=(_arg0); end

  # Returns the value of attribute produces.
  def produces; end

  # Sets the attribute produces
  #
  # @param value the value to set the attribute produces to.
  def produces=(_arg0); end

  # Returns the value of attribute routes.
  def routes; end

  # Sets the attribute routes
  #
  # @param value the value to set the attribute routes to.
  def routes=(_arg0); end

  # Returns the value of attribute validator_option.
  def validator_option; end
end

class Committee::Drivers::OpenAPI2::SchemaBuilder
  # @return [SchemaBuilder] a new instance of SchemaBuilder
  def initialize(link_data); end

  private

  def check_required_fields!(param_data); end

  # Returns the value of attribute link_data.
  def link_data; end

  # Sets the attribute link_data
  #
  # @param value the value to set the attribute link_data to.
  def link_data=(_arg0); end
end

Committee::Drivers::OpenAPI2::SchemaBuilder::LINK_REQUIRED_FIELDS = T.let(T.unsafe(nil), Array)
module Committee::Drivers::OpenAPI3; end

class Committee::Drivers::OpenAPI3::Driver < ::Committee::Drivers::Driver
  def default_allow_get_body; end
  def default_coerce_date_times; end

  # Whether parameters that were form-encoded will be coerced by default.
  def default_coerce_form_params; end

  # Whether parameters in a request's path will be considered and coerced by
  # default.
  def default_path_params; end

  # Whether parameters in a request's query string will be considered and
  # coerced by default.
  def default_query_params; end

  def default_validate_success_only; end
  def name; end

  # @return [Committee::Drivers::OpenAPI3::Schema]
  def parse(open_api); end

  def schema_class; end
end

class Committee::Drivers::OpenAPI3::Schema < ::Committee::Drivers::Schema
  # @return [Schema] a new instance of Schema
  def initialize(driver, open_api); end

  def build_router(options); end

  # we don't use attr_reader because this method override super class
  def driver; end

  # @return [OpenAPIParser::Schemas::OpenAPI]
  def open_api; end

  # OpenAPI3 only
  def operation_object(path, method); end

  # @return [Boolean]
  def supports_stub?; end

  # Returns the value of attribute validator_option.
  def validator_option; end
end

# Schema is a base class for driver schema implementations.
class Committee::Drivers::Schema
  def build_router(options); end

  # A link back to the derivative instance of Committee::Drivers::Driver
  # that create this schema.
  def driver; end

  # Stubs are supported in JSON Hyper-Schema and OpenAPI 2, but not yet in OpenAPI 3
  #
  # @return [Boolean]
  def supports_stub?; end
end

class Committee::Error < ::StandardError; end

class Committee::InvalidRequest < ::Committee::Error
  # @return [InvalidRequest] a new instance of InvalidRequest
  def initialize(error_message = T.unsafe(nil), original_error: T.unsafe(nil)); end

  # Returns the value of attribute original_error.
  def original_error; end
end

class Committee::InvalidResponse < ::Committee::Error
  # @return [InvalidResponse] a new instance of InvalidResponse
  def initialize(error_message = T.unsafe(nil), original_error: T.unsafe(nil)); end

  # Returns the value of attribute original_error.
  def original_error; end
end

module Committee::Middleware; end

class Committee::Middleware::Base
  # @return [Base] a new instance of Base
  def initialize(app, options = T.unsafe(nil)); end

  def call(env); end

  private

  def build_schema_validator(request); end

  class << self
    def get_schema(options); end
  end
end

class Committee::Middleware::RequestValidation < ::Committee::Middleware::Base
  # @return [RequestValidation] a new instance of RequestValidation
  def initialize(app, options = T.unsafe(nil)); end

  def handle(request); end

  private

  def handle_exception(e, env); end
end

class Committee::Middleware::ResponseValidation < ::Committee::Middleware::Base
  # @return [ResponseValidation] a new instance of ResponseValidation
  def initialize(app, options = T.unsafe(nil)); end

  def handle(request); end

  # Returns the value of attribute validate_success_only.
  def validate_success_only; end

  private

  def handle_exception(e, env); end

  class << self
    # @return [Boolean]
    def validate?(status, validate_success_only); end
  end
end

class Committee::Middleware::Stub < ::Committee::Middleware::Base
  # @raise [Committee::OpenAPI3Unsupported]
  # @return [Stub] a new instance of Stub
  def initialize(app, options = T.unsafe(nil)); end

  def handle(request); end

  private

  def cache(link); end
end

class Committee::NotFound < ::Committee::Error; end
class Committee::OpenAPI3Unsupported < ::Committee::Error; end
class Committee::ReferenceNotFound < ::Committee::Error; end

class Committee::RequestUnpacker
  # @return [RequestUnpacker] a new instance of RequestUnpacker
  def initialize(options = T.unsafe(nil)); end

  def unpack_headers(request); end
  def unpack_query_params(request); end

  # reutrn params and is_form_params
  def unpack_request_params(request); end

  private

  def parse_json(request); end

  class << self
    # Enable string or symbol key access to the nested params hash.
    #
    # (Copied from Sinatra)
    def indifferent_params(object); end
  end
end

module Committee::SchemaValidator
  class << self
    # @param prefix [String]
    # @return [Regexp]
    def build_prefix_regexp(prefix); end

    def request_media_type(request); end
  end
end

class Committee::SchemaValidator::HyperSchema
  # @return [HyperSchema] a new instance of HyperSchema
  def initialize(router, request, validator_option); end

  # Returns the value of attribute link.
  def link; end

  # @return [Boolean]
  def link_exist?; end

  # Returns the value of attribute param_matches.
  def param_matches; end

  def request_validate(request); end
  def response_validate(status, headers, response, _test_method = T.unsafe(nil)); end

  # Returns the value of attribute validator_option.
  def validator_option; end

  private

  def coerce_form_params(parameter); end
  def coerce_path_params; end
  def coerce_query_params(request); end
  def parameter_coerce!(request, link, coerce_key); end
  def request_schema_validation(request); end
  def request_unpack(request); end
end

class Committee::SchemaValidator::HyperSchema::ParameterCoercer
  # @return [ParameterCoercer] a new instance of ParameterCoercer
  def initialize(params, schema, options = T.unsafe(nil)); end

  def call!; end

  private

  def coerce_array_data!(original_val, schema); end
  def coerce_object!(hash, schema); end
  def coerce_value!(original_val, s); end
  def parse_date_time(original_val); end
end

class Committee::SchemaValidator::HyperSchema::RequestValidator
  # @return [RequestValidator] a new instance of RequestValidator
  def initialize(link, options = T.unsafe(nil)); end

  def call(request, params, headers); end

  private

  def check_content_type!(request, data); end

  # @return [Boolean]
  def empty_request?(request); end
end

class Committee::SchemaValidator::HyperSchema::ResponseGenerator
  def call(link); end

  private

  def generate_properties(link, schema); end

  # @return [Boolean]
  def legacy_hyper_schema_rel?(link); end

  # Gets the target schema of a link. This is normally just the standard
  # response schema, but we allow some legacy behavior for hyper-schema links
  # tagged with rel=instances to instead use the schema of their parent
  # resource.
  def target_schema(link); end
end

# These are basic types that are part of the JSON schema for which we'll
# emit zero values when generating a response. For a schema that allows
# multiple of the types in the list, types are preferred in the order in
# which they're defined.
Committee::SchemaValidator::HyperSchema::ResponseGenerator::SCALAR_TYPES = T.let(T.unsafe(nil), Hash)

class Committee::SchemaValidator::HyperSchema::ResponseValidator
  # @return [ResponseValidator] a new instance of ResponseValidator
  def initialize(link, options = T.unsafe(nil)); end

  def call(status, headers, data); end

  # Returns the value of attribute validate_success_only.
  def validate_success_only; end

  private

  def check_content_type!(response); end

  # @return [Boolean]
  def legacy_hyper_schema_rel?(link); end

  def response_media_type(response); end

  # Gets the target schema of a link. This is normally just the standard
  # response schema, but we allow some legacy behavior for hyper-schema links
  # tagged with rel=instances to instead use the schema of their parent
  # resource.
  def target_schema(link); end
end

class Committee::SchemaValidator::HyperSchema::Router
  # @return [Router] a new instance of Router
  def initialize(schema, validator_option); end

  def build_schema_validator(request); end
  def find_link(method, path); end
  def find_request_link(request); end

  # @return [Boolean]
  def includes?(path); end

  # @return [Boolean]
  def includes_request?(request); end
end

# StringParamsCoercer takes parameters that are specified over a medium that
# can only accept strings (for example in a URL path or in query parameters)
# and attempts to coerce them into known types based of a link's schema
# definition.
#
# Currently supported types: null, integer, number and boolean.
#
# +call+ returns a hash of all params which could be coerced - coercion
# errors are simply ignored and expected to be handled later by schema
# validation.
class Committee::SchemaValidator::HyperSchema::StringParamsCoercer
  # @return [StringParamsCoercer] a new instance of StringParamsCoercer
  def initialize(query_hash, schema, options = T.unsafe(nil)); end

  def call!; end

  private

  def coerce_array_data!(original_val, schema); end
  def coerce_object!(hash, schema); end
  def coerce_value!(original_val, s); end
end

class Committee::SchemaValidator::OpenAPI3
  # @param validator_option [Committee::SchemaValidator::Option]
  # @return [OpenAPI3] a new instance of OpenAPI3
  def initialize(router, request, validator_option); end

  # @return [Boolean]
  def link_exist?; end

  def request_validate(request); end
  def response_validate(status, headers, response, test_method = T.unsafe(nil)); end

  private

  def coerce_path_params; end
  def copy_coerced_data_to_query_hash(request); end
  def header(request); end
  def request_schema_validation(request); end
  def request_unpack(request); end

  # Returns the value of attribute validator_option.
  def validator_option; end
end

class Committee::SchemaValidator::OpenAPI3::OperationWrapper
  # # @param request_operation [OpenAPIParser::RequestOperation]
  #
  # @return [OperationWrapper] a new instance of OperationWrapper
  def initialize(request_operation); end

  def coerce_path_parameter(validator_option); end
  def http_method; end
  def original_path; end
  def path_params; end
  def request_content_types; end

  # @return [Boolean]
  def valid_request_content_type?(content_type); end

  def validate_request_params(params, headers, validator_option); end

  # @param strict [Boolean] when not content_type or status code definition, raise error
  def validate_response_params(status_code, headers, response_data, strict, check_header); end

  private

  # @return [OpenAPIParser::SchemaValidator::Options]
  def build_openapi_parser_get_option(validator_option); end

  # @return [OpenAPIParser::SchemaValidator::Options]
  def build_openapi_parser_path_option(validator_option); end

  # @return [OpenAPIParser::SchemaValidator::Options]
  def build_openapi_parser_post_option(validator_option); end

  # @return [OpenAPIParser::RequestOperation]
  def request_operation; end

  def response_validate_options(strict, check_header); end
  def validate_get_request_params(params, headers, validator_option); end
  def validate_post_request_params(params, headers, validator_option); end
end

class Committee::SchemaValidator::OpenAPI3::RequestValidator
  # @param operation_object [SchemaValidator::OpenAPI3::OperationWrapper]
  # @param validator_option [Committee::SchemaValidator::Option]
  # @return [RequestValidator] a new instance of RequestValidator
  def initialize(operation_object, validator_option:); end

  def call(request, params, headers); end

  private

  # @raise [Committee::InvalidRequest]
  def check_content_type(request, content_type); end

  def valid_content_types; end
end

class Committee::SchemaValidator::OpenAPI3::ResponseValidator
  # @param validator_option [Committee::SchemaValidator::Options]
  # @param operation_wrapper [Committee::SchemaValidator::OpenAPI3::OperationWrapper]
  # @return [ResponseValidator] a new instance of ResponseValidator
  def initialize(operation_wrapper, validator_option); end

  def call(status, headers, response_data, strict); end

  # Returns the value of attribute validate_success_only.
  def validate_success_only; end

  private

  # Returns the value of attribute check_header.
  def check_header; end

  # Returns the value of attribute operation_wrapper.
  def operation_wrapper; end
end

class Committee::SchemaValidator::OpenAPI3::Router
  # @param validator_option [Committee::SchemaValidator::Option]
  # @return [Router] a new instance of Router
  def initialize(schema, validator_option); end

  def build_schema_validator(request); end

  # @return [Boolean]
  def includes_request?(request); end

  def operation_object(request); end

  private

  # @return [Boolean]
  def prefix_request?(request); end
end

class Committee::SchemaValidator::Option
  # @return [Option] a new instance of Option
  def initialize(options, schema, schema_type); end

  # Boolean Options
  def allow_form_params; end

  # Boolean Options
  def allow_get_body; end

  # Boolean Options
  def allow_query_params; end

  # Boolean Options
  def check_content_type; end

  # Boolean Options
  def check_header; end

  # Boolean Options
  def coerce_date_times; end

  # Boolean Options
  def coerce_form_params; end

  # Boolean Options
  def coerce_path_params; end

  # Boolean Options
  def coerce_query_params; end

  # Boolean Options
  def coerce_recursive; end

  # Non-boolean options:
  def headers_key; end

  # Boolean Options
  def optimistic_json; end

  # Non-boolean options:
  def params_key; end

  # Boolean Options
  def parse_response_by_content_type; end

  # Non-boolean options:
  def path_hash_key; end

  # Non-boolean options:
  def prefix; end

  # Non-boolean options:
  def query_hash_key; end

  # Non-boolean options:
  def request_body_hash_key; end

  # Boolean Options
  def validate_success_only; end
end

module Committee::Test; end

module Committee::Test::Methods
  def assert_request_schema_confirm; end
  def assert_response_schema_confirm(expected_status = T.unsafe(nil)); end
  def assert_schema_conform(expected_status = T.unsafe(nil)); end
  def committee_options; end
  def old_behavior; end
  def request_object; end
  def response_data; end
  def router; end
  def schema; end
  def schema_coverage; end
  def schema_validator; end

  # @return [Boolean]
  def validate_response?(status); end
end

class Committee::Test::SchemaCoverage
  # @return [SchemaCoverage] a new instance of SchemaCoverage
  def initialize(schema); end

  def report; end
  def report_flatten; end

  # Returns the value of attribute schema.
  def schema; end

  def update_response_coverage!(path, method, response_status); end

  class << self
    def flatten_report(report); end
    def merge_report(first, second); end
  end
end

module Committee::Utils
  class << self
    def deep_copy(from); end

    # Creates a Hash with indifferent access.
    #
    # (Copied from Sinatra)
    def indifferent_hash; end
  end
end

class Committee::ValidationError
  # @return [ValidationError] a new instance of ValidationError
  def initialize(status, id, message, request = T.unsafe(nil)); end

  def error_body; end

  # Returns the value of attribute id.
  def id; end

  # Returns the value of attribute message.
  def message; end

  def render; end

  # Returns the value of attribute request.
  def request; end

  # Returns the value of attribute status.
  def status; end
end
